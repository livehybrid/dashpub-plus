version: "3.6"
services:
  app:
    image: livehybrid/dashpub_cacheapi:latest
    environment:
      DASHPUB_HOST: dashpub
      REDIS_HOST: redis-node-0
      REDIS_PASS: TestPassword1
      REDIS_SSL: "False"
      REDIS_USER: dashpub
    labels:
      io.rancher.container.pull_image: always

  dashpub:
    image: livehybrid/splunk-dashpub:latest
    environment:
      - DASHPUB_APP=search
      - DASHPUB_BRANCH=develop
      - DASHPUB_BUILD_ID="1"
      #      - DASHPUB_CUSTOM_DEPS='[{"@react-google-maps/api"="^2.19.2"},{"react-icons":"*"}]'
      #      - DASHPUB_CUSTOM_VIZ_PATH=/custom_components
      - DASHPUB_DASHBOARDS=example[Demo|Example]
      - DASHPUB_FOLDERNAME=app
      - DASHPUB_FOOTER=Demo Splunk dashboards hosted
      - DASHPUB_HOSTEDBY_NAME=Will Searle
      - DASHPUB_HOSTEDBY_URL=https://www.linkedin.com/in/williamsearle/
      - DASHPUB_PROJECTNAME=app
      - DASHPUB_REPO=https://github.com/livehybrid/dashpub
      - DASHPUB_SCREENSHOTS="true"
      - DASHPUB_SCREENSHOT_DIR=screenshots
      - DASHPUB_SCREENSHOT_EXT=jpg
      - DASHPUB_THEME=dark
      - DASHPUB_TITLE=Demo Dashboards
      - DASHPUB_VERCEL="false"
      - NODE_OPTIONS=--inspect
      - REDIS_PASS=TestPassword1
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - SPLUNKD_TOKEN
      - SPLUNKD_URL
      - SPLUNKD_USER
      - VERCEL_URL=localhost
      - ENV_MODE

  screenshotter:
    image: livehybrid/dashpub_screenshotter:latest
    environment:
      NGINX_HOST: nginx
      NGINX_PORT: "3001"
    volumes:
      - screenshots:/dashpub/screenshots

  nginx:
    image: nginx:mainline-perl
    labels:
      - traefik.http.routers.dashpub-https.service=dashpub-service
      - traefik.http.services.dashpub-service.loadbalancer.server.port=3001
      - traefik.http.routers.dashpub-https.rule=Host(`dashpub.mac.splunk.engineer`)
      - traefik.http.routers.dashpub-https.entrypoints=https
      - traefik.http.routers.dashpub-https.tls=true
    ports:
      - 3001
    volumes:
      - screenshots:/var/www/html/public/screenshots
      - screenshots:/var/www/html/public/screens
    tty: true
    # logging:
    #   driver: splunk
    #   options:
    #     splunk-format: raw
    #     splunk-index: nginx_web
    #     splunk-source: docker:dashpub:nginx
    #     splunk-token: REDACTED
    #     splunk-url: REDACTED
    #     splunk-verify-connection: "false"

  redis-node-0:
    image: redis:8.2-alpine
    command: ["redis-server", "--port", "6379", "--cluster-enabled", "yes", "--cluster-config-file", "nodes.conf", "--cluster-node-timeout", "5000", "--appendonly", "yes", "--bind", "0.0.0.0", "--requirepass", "TestPassword1"]
    volumes:
      - redis-node-0-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6379", "-a", "TestPassword1", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    labels:
      io.rancher.container.pull_image: always

  redis-node-1:
    image: redis:8.2-alpine
    command: ["redis-server", "--port", "6379", "--cluster-enabled", "yes", "--cluster-config-file", "nodes.conf", "--cluster-node-timeout", "5000", "--appendonly", "yes", "--bind", "0.0.0.0", "--requirepass", "TestPassword1"]
    volumes:
      - redis-node-1-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6379", "-a", "TestPassword1", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    labels:
      io.rancher.container.pull_image: always

  redis-node-2:
    image: redis:8.2-alpine
    command: ["redis-server", "--port", "6379", "--cluster-enabled", "yes", "--cluster-config-file", "nodes.conf", "--cluster-node-timeout", "5000", "--appendonly", "yes", "--bind", "0.0.0.0", "--requirepass", "TestPassword1"]
    volumes:
      - redis-node-2-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6379", "-a", "TestPassword1", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    labels:
      io.rancher.container.pull_image: always

  redis-cluster-init:
    image: redis:8.2-alpine
    depends_on:
      - redis-node-0
      - redis-node-1
      - redis-node-2
    command: >
      sh -c "
        echo 'Waiting for all Redis nodes to be ready...' &&
        sleep 5 &&
        echo 'Initializing Redis cluster...' &&
        redis-cli -a TestPassword1 --cluster create redis-node-0:6379 redis-node-1:6379 redis-node-2:6379 --cluster-replicas 0 --cluster-yes &&
        echo 'Redis cluster initialization complete!' &&
        echo 'Cluster info:' &&
        redis-cli -h redis-node-0 -p 6379 -a TestPassword1 cluster info
      "

volumes:
  screenshots:
    external: false
  redis-node-0-data:
  redis-node-1-data:
  redis-node-2-data:
